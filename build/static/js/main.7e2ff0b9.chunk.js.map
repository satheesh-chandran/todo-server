{"version":3,"sources":["components/TodoText.js","components/TextComponent.js","components/utils.js","components/Heading.js","components/TodoMaster.js","App.js","serviceWorker.js","index.js"],"names":["TodoText","property","id","changeStatus","title","removeTask","backgroundColor","textDecoration","className","style","onClick","TextComponent","props","useState","value","updateValue","onChange","eve","target","placeholder","onKeyDown","keyCode","onSubmit","autoFocus","sendRequest","url","callback","options","method","fetch","then","res","json","getPostOptions","body","headers","JSON","stringify","Heading","editTitle","refreshState","toggleRefreshState","isHeadingEditable","toggleHeadingEditable","useEffect","heading","s","clearTasks","properties","TodoMaster","tasks","setTasks","refresh","changeRefreshState","state","map","task","texts","status","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e2ff0b9.chunk.js","sourcesContent":["import React from 'react';\n\nconst TodoText = ({ property, id, changeStatus, title, removeTask }) => {\n  const { backgroundColor, textDecoration } = property;\n  return (\n    <div className='lines-container'>\n      <div style={{ textDecoration }} onClick={() => changeStatus(id)}>\n        <div className='status' style={{ backgroundColor }}></div>\n        {title}\n      </div>\n      <span className='cancelButton' onClick={() => removeTask(id)}>\n        X\n      </span>\n    </div>\n  );\n};\n\nexport default TodoText;\n","import React, { useState } from 'react';\n\nconst TextComponent = function (props) {\n  const [value, updateValue] = useState(props.value);\n  const onKeyDown = ({ keyCode }) => {\n    if (keyCode === 13 && value !== '') {\n      props.onSubmit(value);\n      updateValue('');\n    }\n  };\n\n  return (\n    <div className='text'>\n      <input\n        value={value}\n        onChange={eve => updateValue(eve.target.value)}\n        placeholder='Enter Title'\n        onKeyDown={onKeyDown}\n        autoFocus\n      ></input>\n    </div>\n  );\n};\n\nexport default TextComponent;\n","const sendRequest = (url, callback, options = { method: 'GET' }) =>\n  fetch(url, options)\n    .then(res => res.json())\n    .then(callback);\n\nconst getPostOptions = body => ({\n  method: 'POST',\n  headers: { 'content-type': 'application/json' },\n  body: JSON.stringify(body)\n});\n\nexport { sendRequest, getPostOptions };\n","import React, { useState, useEffect } from 'react';\nimport TextComponent from './TextComponent';\nimport { sendRequest, getPostOptions } from './utils';\nconst DEFAULT = 'TODO';\n\nconst Heading = function (props) {\n  const [title, editTitle] = useState(DEFAULT);\n  const [refreshState, toggleRefreshState] = useState(false);\n  const [isHeadingEditable, toggleHeadingEditable] = useState(false);\n\n  useEffect(() => {\n    sendRequest('/api/heading', ({ heading }) => editTitle(heading));\n  }, [refreshState]);\n\n  const editHeading = heading =>\n    fetch('/api/editHeading', getPostOptions({ heading })).then(() => {\n      toggleHeadingEditable(false);\n      toggleRefreshState(s => !s);\n    });\n\n  const reset = () =>\n    fetch('/api/resetHeading').then(() => {\n      props.clearTasks();\n      toggleRefreshState(s => !s);\n    });\n\n  if (isHeadingEditable)\n    return <TextComponent value={title} onSubmit={editHeading} />;\n  return (\n    <h1>\n      <span onClick={() => toggleHeadingEditable(true)}>{title}</span>\n      <span className='clear' onClick={reset}>\n        X\n      </span>\n    </h1>\n  );\n};\n\nexport default Heading;\n","import React, { useState, useEffect } from 'react';\nimport TodoText from './TodoText';\nimport Heading from './Heading';\nimport TextComponent from './TextComponent';\nimport { sendRequest, getPostOptions } from './utils';\n\n/* status = { 0: 'notDone', 1: 'progressing', 2: 'done' } */\n\nconst properties = [\n  { backgroundColor: 'red', textDecoration: 'none' },\n  { backgroundColor: 'orange', textDecoration: 'none' },\n  { backgroundColor: 'green', textDecoration: 'line-through' }\n];\n\nconst TodoMaster = function () {\n  const [tasks, setTasks] = useState([]);\n  const [refresh, changeRefreshState] = useState(false);\n  const toggleRefreshState = () => changeRefreshState(state => !state);\n\n  useEffect(() => {\n    const updateTasks = tasks => setTasks(tasks.map(task => ({ ...task })));\n    sendRequest('/api/getAllItems', updateTasks);\n  }, [refresh]);\n\n  const clearItems = () => fetch('/api/clearItems').then(toggleRefreshState);\n  const addTodo = title => fetch('/api/addItem', getPostOptions({ title })).then(toggleRefreshState);\n  const removeTask = id => fetch(`/api/deleteItem`, getPostOptions({ id })).then(toggleRefreshState);\n  const changeStatus = id => fetch(`/api/changeStatus`, getPostOptions({ id })).then(toggleRefreshState);\n\n  const texts = tasks.map(({ status, title, id }) => (\n    <TodoText\n      id={id}\n      key={id}\n      title={title}\n      changeStatus={changeStatus}\n      property={properties[status]}\n      removeTask={removeTask}\n    />\n  ));\n\n  return (\n    <div className='master'>\n      <Heading clearTasks={clearItems} />\n      <TextComponent onSubmit={addTodo} value='' />\n      <div className='list-container'>{texts}</div>\n    </div>\n  );\n};\n\nexport default TodoMaster;\n","import React from 'react';\nimport './App.css';\nimport TodoMaster from './components/TodoMaster';\n\nconst App = function () {\n  return (\n    <div>\n      <TodoMaster />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}